<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Integration on YoSQL - write more SQL</title><link>https://yosql.projects.metio.wtf/categories/integration/</link><description>Recent content in Integration on YoSQL - write more SQL</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 07 Jul 2019 14:29:29 +0200</lastBuildDate><atom:link href="https://yosql.projects.metio.wtf/categories/integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Converters</title><link>https://yosql.projects.metio.wtf/integration/converters/</link><pubDate>Sun, 07 Jul 2019 14:29:29 +0200</pubDate><guid>https://yosql.projects.metio.wtf/integration/converters/</guid><description>Changing the result type is possible with the help of a converter:
-- parameters: -- - name: userId -- type: int -- results: -- converter: my.own.UserConverter -- resultType: my.own.User SELECT * FROM users WHERE id = :userId Which in turn changes the generated code into this:
// uses &amp;#39;User&amp;#39; instead of &amp;#39;ResultRow&amp;#39; &amp;amp; &amp;#39;int&amp;#39; instead of &amp;#39;Object&amp;#39; List&amp;lt;User&amp;gt; findUser(int userId) Stream&amp;lt;User&amp;gt; findUserStreamEager(int userId) Stream&amp;lt;User&amp;gt; findUserStreamLazy(int userId) Flowable&amp;lt;User&amp;gt; findUserFlow(int userId) my.own.UserConverter could look like this:</description></item><item><title>Reactive</title><link>https://yosql.projects.metio.wtf/integration/reactive/</link><pubDate>Sun, 07 Jul 2019 14:27:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/integration/reactive/</guid><description>YoSQL supports several reactive APIs like rxJava or reactor.
The yosql-maven-plugin automatically enables reactive methods like the following in case a reactive API was detected as a dependency of the current project.
// lazily loads all rows in a stateful flow which closes automatically Flowable&amp;lt;ResultRow&amp;gt; findUserFlow(Object userId)</description></item><item><title>Type Safety</title><link>https://yosql.projects.metio.wtf/integration/type-safety/</link><pubDate>Sun, 16 Jun 2019 18:53:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/integration/type-safety/</guid><description>&amp;lt;project_root&amp;gt;/ └── src/ └── main/ └── yosql/ └── user/ ├── findUser.sql └── getAllUsers.sql The findUser.sql file:
SELECT * FROM users WHERE id = :userId The type of the generated userId parameter will default to java.lang.Object as long as no other information is given. YoSQL does not parse your database schema, nor does it somehow infer the type of userId using some smart algorithm. Instead, it relies on its users to do the work (sorry!</description></item><item><title>Custom</title><link>https://yosql.projects.metio.wtf/integration/custom/</link><pubDate>Sun, 16 Jun 2019 18:51:48 +0200</pubDate><guid>https://yosql.projects.metio.wtf/integration/custom/</guid><description>It is possible to use yosql-core as an external dependency and build your own code generator on top.</description></item></channel></rss>