<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.81.0">Hugo</generator><title type="html">write more SQL on YoSQL - write more SQL</title><link href="https://yosql.projects.metio.wtf/" rel="alternate" type="text/html" title="HTML"/><link href="https://yosql.projects.metio.wtf/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://yosql.projects.metio.wtf/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><link href="https://yosql.projects.metio.wtf/humans.txt" rel="alternate" type="text/plain" title="Humans"/><link href="https://yosql.projects.metio.wtf/foaf.rdf" rel="alternate" type="application/rdf+xml" title="FOAF"/><updated>2021-03-08T06:55:52+00:00</updated><id>https://yosql.projects.metio.wtf/</id><entry><title type="html">Annotations</title><link href="https://yosql.projects.metio.wtf/configuration/annotations/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/configuration/annotations/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html"><![CDATA[<h1 id="annotateclasses"><code>annotateClasses</code></h1>
<p>Should <code>@Generated</code> annotations be added to generated classes?. Defaults to <code>false</code>.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-false">Option: &lsquo;false&rsquo;</h3>
<p>The default value of the <code>classGeneratedAnnotation</code> is <code>false</code>. Setting the option to <code>false</code> therefore produces the same code generated as the default configuration.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.persistence</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeRepository</span> <span class="o">{</span>

    <span class="c1">// ... rest of generated code
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></div><h3 id="option-true">Option: &lsquo;true&rsquo;</h3>
<p>Changing the <code>annotateClasses</code> configuration option to <code>true</code> adds the <code>@Generated</code> annotation to every generated class. Its is possible to configure each value individually using other config options (TODO: link here?).</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.processing.Generated</span><span class="o">;</span>

<span class="nd">@Generated</span><span class="o">(</span>
    <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;YoSQL&#34;</span><span class="o">,</span>
    <span class="n">date</span> <span class="o">=</span> <span class="s">&#34;&lt;current_timestamp&gt;&#34;</span><span class="o">,</span>
    <span class="n">comments</span> <span class="o">=</span> <span class="s">&#34;DO NOT EDIT&#34;</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeRepository</span> <span class="o">{</span>

    <span class="c1">// ... rest of generated code (same as above)
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></div><h2 id="related-options">Related Options</h2>
<ul>
<li>TODO: list of related config options that somehow influence or are influenced by this options</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="../tooling/maven">documentation
for Maven</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml">  <span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
      ...
      <span class="nt">&lt;plugin&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>yosql-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;configuration&gt;</span>
          <span class="nt">&lt;annotations&gt;</span>
            <span class="nt">&lt;annotateClasses&gt;</span>true<span class="nt">&lt;/annotateClasses&gt;</span>
          <span class="nt">&lt;/annotations&gt;</span>
        <span class="nt">&lt;/configuration&gt;</span>
      <span class="nt">&lt;/plugin&gt;</span>
      ...
    <span class="nt">&lt;/plugins&gt;</span>
  <span class="nt">&lt;/build&gt;</span>
</code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="../tooling/gradle">documentation for Gradle</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;yosql&#39;</span>

<span class="n">yosql</span> <span class="o">{</span>
    <span class="nl">annotateClasses:</span> <span class="kc">true</span>
<span class="o">}</span>
</code></pre></div><p>TODO: info for kotlin</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="../tooling/bazel">documentation for
Bazel</a>.</p>
<p>TODO: info for bazel</p>
<h3 id="cli">CLI</h3>
<p>In order to use YoSQL on the command line, take a look at the tooling <a href="../tooling/cli">documentation for CLI</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ yosql --annotateClasses<span class="o">=</span><span class="nb">true</span>
</code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/annotations" term="annotations" label="annotations"/><category scheme="https://yosql.projects.metio.wtf/tags/annotateclasses" term="annotateclasses" label="annotateClasses"/></entry><entry><title type="html">JDBC</title><link href="https://yosql.projects.metio.wtf/api/jdbc/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/api/spring_data_jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="Spring-Data-JDBC"/><link href="https://yosql.projects.metio.wtf/api/spring_jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="Spring-JDBC"/><id>https://yosql.projects.metio.wtf/api/jdbc/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>javax.sql&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/dao" term="dao" label="DAO"/><category scheme="https://yosql.projects.metio.wtf/tags/jdbc" term="jdbc" label="JDBC"/></entry><entry><title type="html">jOOQ</title><link href="https://yosql.projects.metio.wtf/api/jooq/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/api/jooq/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>jOOQ&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/dao" term="dao" label="DAO"/><category scheme="https://yosql.projects.metio.wtf/tags/jooq" term="jooq" label="jOOQ"/></entry><entry><title type="html">JPA</title><link href="https://yosql.projects.metio.wtf/api/jpa/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/api/jpa/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>JPA&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/dao" term="dao" label="DAO"/><category scheme="https://yosql.projects.metio.wtf/tags/jpa" term="jpa" label="JPA"/></entry><entry><title type="html">JUL</title><link href="https://yosql.projects.metio.wtf/logging/jul/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/logging/jul/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>java.util.logging&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/loggers" term="loggers" label="Loggers"/><category scheme="https://yosql.projects.metio.wtf/tags/jul" term="jul" label="JUL"/><category scheme="https://yosql.projects.metio.wtf/tags/java.util.logging" term="java.util.logging" label="java.util.logging"/></entry><entry><title type="html">log4j</title><link href="https://yosql.projects.metio.wtf/logging/log4j/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/logging/log4j/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>log4j&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/loggers" term="loggers" label="Loggers"/><category scheme="https://yosql.projects.metio.wtf/tags/log4j" term="log4j" label="log4j"/></entry><entry><title type="html">no-op</title><link href="https://yosql.projects.metio.wtf/logging/no-op/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/logging/no-op/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>no-op&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/loggers" term="loggers" label="Loggers"/><category scheme="https://yosql.projects.metio.wtf/tags/no-op" term="no-op" label="no-op"/></entry><entry><title type="html">Repositories</title><link href="https://yosql.projects.metio.wtf/configuration/repositories/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/configuration/repositories/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html"><![CDATA[<h1 id="basepackagename"><code>basePackageName</code></h1>
<p>The base package name for the generated code. Defaults to <code>com.example.persistence</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.persistence</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeRepository</span> <span class="o">{</span>

    <span class="c1">// ... rest of generaed code
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></div><p>Changing the <code>basePackageName</code> configuration option to <code>your.own.domain</code> generates the following code instead:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">your.own.domain</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeRepository</span> <span class="o">{</span>

    <span class="c1">// ... rest of generated code (same as above)
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/repositories" term="repositories" label="repositories"/><category scheme="https://yosql.projects.metio.wtf/tags/basepackagename" term="basepackagename" label="basePackageName"/></entry><entry><title type="html">slf4j</title><link href="https://yosql.projects.metio.wtf/logging/slf4j/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/logging/slf4j/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>slf4j&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/loggers" term="loggers" label="Loggers"/><category scheme="https://yosql.projects.metio.wtf/tags/slf4j" term="slf4j" label="slf4j"/></entry><entry><title type="html">Spring-Data-JDBC</title><link href="https://yosql.projects.metio.wtf/api/spring_data_jdbc/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/api/spring_jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="Spring-JDBC"/><link href="https://yosql.projects.metio.wtf/api/jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="JDBC"/><id>https://yosql.projects.metio.wtf/api/spring_data_jdbc/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>spring-data-jdbc&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/dao" term="dao" label="DAO"/><category scheme="https://yosql.projects.metio.wtf/tags/jdbc" term="jdbc" label="JDBC"/><category scheme="https://yosql.projects.metio.wtf/tags/spring-data" term="spring-data" label="Spring-Data"/></entry><entry><title type="html">Spring-JDBC</title><link href="https://yosql.projects.metio.wtf/api/spring_jdbc/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/api/jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="JDBC"/><link href="https://yosql.projects.metio.wtf/api/spring_data_jdbc/?utm_source=atom_feed" rel="related" type="text/html" title="Spring-Data-JDBC"/><id>https://yosql.projects.metio.wtf/api/spring_jdbc/</id><published>2019-09-27T18:51:08+02:00</published><updated>2019-09-27T18:51:08+02:00</updated><content type="html">&lt;p>The &lt;code>spring-jdbc&lt;/code> based implementation.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/dao" term="dao" label="DAO"/><category scheme="https://yosql.projects.metio.wtf/tags/jdbc" term="jdbc" label="JDBC"/><category scheme="https://yosql.projects.metio.wtf/tags/spring" term="spring" label="Spring"/></entry><entry><title type="html">Converters</title><link href="https://yosql.projects.metio.wtf/integration/converters/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/integration/converters/</id><published>2019-07-07T14:29:29+02:00</published><updated>2019-07-07T14:29:29+02:00</updated><content type="html"><![CDATA[<p>Changing the result type is possible with the help of a converter:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- parameters:
</span><span class="c1">--   - name: userId
</span><span class="c1">--     type: int
</span><span class="c1">-- results:
</span><span class="c1">--   converter: my.own.UserConverter
</span><span class="c1">--   resultType: my.own.User
</span><span class="c1"></span><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
</code></pre></div><p>Which in turn changes the generated code into this:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// uses &#39;User&#39; instead of &#39;ResultRow&#39; &amp; &#39;int&#39; instead of &#39;Object&#39;
</span><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUser</span><span class="o">(</span><span class="kt">int</span> <span class="n">userId</span><span class="o">)</span>
<span class="n">Stream</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserStreamEager</span><span class="o">(</span><span class="kt">int</span> <span class="n">userId</span><span class="o">)</span>
<span class="n">Stream</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserStreamLazy</span><span class="o">(</span><span class="kt">int</span> <span class="n">userId</span><span class="o">)</span>
<span class="n">Flowable</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserFlow</span><span class="o">(</span><span class="kt">int</span> <span class="n">userId</span><span class="o">)</span>
</code></pre></div><p><code>my.own.UserConverter</code> could look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">my.own</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.ResultSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">my.own.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">my.own.persistence.util.ResultState</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConverter</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">User</span> <span class="nf">asUserType</span><span class="o">(</span><span class="kd">final</span> <span class="n">ResultState</span> <span class="n">result</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getResultSet</span><span class="o">();</span>
        <span class="kd">final</span> <span class="n">User</span> <span class="n">pojo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
        <span class="n">pojo</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">));</span>
        <span class="n">pojo</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">pojo</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/integration" term="integration" label="Integration"/><category scheme="https://yosql.projects.metio.wtf/tags/results" term="results" label="results"/></entry><entry><title type="html">Reactive</title><link href="https://yosql.projects.metio.wtf/integration/reactive/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/integration/reactive/</id><published>2019-07-07T14:27:54+02:00</published><updated>2019-07-07T14:27:54+02:00</updated><content type="html"><![CDATA[<p><code>YoSQL</code> supports several reactive APIs like <strong>rxJava</strong> or <strong>reactor</strong>.</p>
<p>The <code>yosql-maven-plugin</code> automatically enables reactive methods like the following in case a reactive API was detected as a dependency of the current project.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// lazily loads all rows in a stateful flow which closes automatically
</span><span class="c1"></span><span class="n">Flowable</span><span class="o">&lt;</span><span class="n">ResultRow</span><span class="o">&gt;</span> <span class="nf">findUserFlow</span><span class="o">(</span><span class="n">Object</span> <span class="n">userId</span><span class="o">)</span>
</code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/integration" term="integration" label="Integration"/><category scheme="https://yosql.projects.metio.wtf/tags/rxjava" term="rxjava" label="rxjava"/><category scheme="https://yosql.projects.metio.wtf/tags/reactor" term="reactor" label="reactor"/><category scheme="https://yosql.projects.metio.wtf/tags/r2dbc" term="r2dbc" label="r2dbc"/></entry><entry><title type="html">Type Safety</title><link href="https://yosql.projects.metio.wtf/integration/type-safety/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/integration/type-safety/</id><published>2019-06-16T18:53:54+02:00</published><updated>2019-06-16T18:53:54+02:00</updated><content type="html"><![CDATA[<pre><code>&lt;project_root&gt;/
└── src/
    └── main/
        └── yosql/
            └── user/
                ├── findUser.sql
                └── getAllUsers.sql
</code></pre><p>The <code>findUser.sql</code> file:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
</code></pre></div><p>The type of the generated <code>userId</code> parameter will default to <code>java.lang.Object</code> as long as no other information is
given. YoSQL does not parse your database schema, nor does it somehow infer the type of <code>userId</code> using some smart
algorithm. Instead, it relies on its users to do the work (sorry!).</p>
<p>We can change the type of <code>userId</code> by adding a front matter to the statement that looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">--
</span><span class="c1">-- parameters:
</span><span class="c1">--   - name: userId
</span><span class="c1">--     type: int
</span><span class="c1">--
</span><span class="c1"></span><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
</code></pre></div><p>After re-generating the code, <code>userId</code> will now be of type <code>int</code>. More complex types as possible as well, as long as
you use their fully qualified name, e.g. <code>java.lang.String</code> or <code>your.custom.domain.Entity</code>.</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/integration" term="integration" label="Integration"/><category scheme="https://yosql.projects.metio.wtf/tags/parameters" term="parameters" label="parameters"/></entry><entry><title type="html">Custom</title><link href="https://yosql.projects.metio.wtf/integration/custom/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/integration/custom/</id><published>2019-06-16T18:51:48+02:00</published><updated>2019-06-16T18:51:48+02:00</updated><content type="html">&lt;p>It is possible to use &lt;code>yosql-core&lt;/code> as an external dependency and build your own code generator on top.&lt;/p></content><category scheme="https://yosql.projects.metio.wtf/categories/integration" term="integration" label="Integration"/><category scheme="https://yosql.projects.metio.wtf/tags/custom" term="custom" label="custom"/></entry><entry><title type="html">Vendor Statements</title><link href="https://yosql.projects.metio.wtf/sql/vendor-statements/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/sql/vendor-statements/</id><published>2019-06-16T18:51:18+02:00</published><updated>2019-06-16T18:51:18+02:00</updated><content type="html"><![CDATA[<p>Vendor specific statements are support as well. Just add a <em>vendor</em> key to your front-matter like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- name: findUsers
</span><span class="c1">-- vendor: Oracle
</span><span class="c1"></span><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="p">(</span>
    <span class="k">SELECT</span>  <span class="n">ROWNUM</span> <span class="n">rn</span><span class="p">,</span> <span class="k">data</span><span class="p">.</span><span class="o">*</span>
    <span class="k">FROM</span>    <span class="p">(</span>
        <span class="k">SELECT</span>  <span class="o">*</span>
        <span class="k">FROM</span>    <span class="n">users</span>
        <span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
    <span class="p">)</span> <span class="k">data</span>
    <span class="k">WHERE</span>   <span class="n">rn</span> <span class="o">&lt;=</span>  <span class="p">:</span><span class="k">offset</span> <span class="o">+</span> <span class="p">:</span><span class="k">limit</span>
<span class="p">)</span>
<span class="k">WHERE</span> <span class="n">rn</span> <span class="o">&gt;=</span> <span class="p">:</span><span class="k">offset</span>
<span class="p">;</span>

<span class="c1">-- name: findUsers
</span><span class="c1">-- vendor: PostgreSQL
</span><span class="c1"></span><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
<span class="k">OFFSET</span>  <span class="p">:</span><span class="k">offset</span>
<span class="k">FETCH</span> <span class="k">NEXT</span> <span class="p">:</span><span class="k">limit</span> <span class="k">ROWS</span> <span class="k">ONLY</span>
<span class="p">;</span>

<span class="c1">-- name: findUsers
</span><span class="c1"></span><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
<span class="k">OFFSET</span>  <span class="p">:</span><span class="k">offset</span>
<span class="k">LIMIT</span>   <span class="p">:</span><span class="k">limit</span>
<span class="p">;</span>
</code></pre></div><p>The first two statements specify a vendor which means that those queries will only be executed when running against the specified database. In case you want to specify a fallback-query that is used whenever no other vendor matches, specify another statement with the same name but no vendor.</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/sql" term="sql" label="SQL"/><category scheme="https://yosql.projects.metio.wtf/tags/vendor" term="vendor" label="Vendor"/></entry><entry><title type="html">Write Sql Files</title><link href="https://yosql.projects.metio.wtf/sql/write-sql-files/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/sql/write-sql-files/</id><published>2019-06-16T18:33:06+02:00</published><updated>2019-06-16T18:33:06+02:00</updated><content type="html"><![CDATA[<pre><code>&lt;project_root&gt;/
└── src/
    └── main/
        └── yosql/
            └── user/
                └── getAllUsers.sql
</code></pre><p>The SQL statements in your .sql files are just plain SQL, e.g. you can save the following statement in a file called
<code>getAllUsers.sql</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
</code></pre></div><p>YoSQL will use the name of the file (<code>getAllUsers</code>) as the generated method name and the name of the enclosing folder
as the prefix for the generated repository. The final result is a new Java class called <code>UserRepository</code> which has a
method called <code>getAllUsers</code>.</p>
<h2 id="using-parameters">Using parameters</h2>
<p>YoSQL supports named parameters only. They must have the form <code>:parameter</code>.</p>
<pre><code>&lt;project_root&gt;/
└── src/
    └── main/
        └── yosql/
            └── user/
                ├── findUser.sql
                └── getAllUsers.sql
</code></pre><p>The newly added <code>findUser.sql</code> file could look like the following and causes YoSQL to add another method named
<code>findUser</code> to the same <code>UserRepository</code> class.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>  <span class="o">*</span>
<span class="k">FROM</span>    <span class="n">users</span>
<span class="k">WHERE</span>   <span class="n">id</span> <span class="o">=</span> <span class="p">:</span><span class="n">userId</span>
</code></pre></div><p>The <code>findUser</code> method will expect one parameter (<code>userId</code>).</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/sql" term="sql" label="SQL"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">CLI</title><link href="https://yosql.projects.metio.wtf/tooling/cli/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/tooling/cli/</id><published>2019-06-16T18:23:45+02:00</published><updated>2019-06-16T18:23:45+02:00</updated><content type="html"><![CDATA[<ol>
<li>Download the latest release</li>
<li>Write .sql files in a directory of your choice (e.g. <code>/path/to/your/sql/files</code>)</li>
<li>Call <code>java -jar yosql-cli.jar --inputBaseDirectory /path/to/your/sql/files --outputBaseDirectory /output/path</code></li>
</ol>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/tooling" term="tooling" label="Tooling"/><category scheme="https://yosql.projects.metio.wtf/tags/cli" term="cli" label="CLI"/></entry><entry><title type="html">Maven</title><link href="https://yosql.projects.metio.wtf/tooling/maven/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/tooling/maven/</id><published>2019-06-16T18:23:40+02:00</published><updated>2019-06-16T18:23:40+02:00</updated><content type="html"><![CDATA[<h2 id="getting-started">Getting Started</h2>
<ol>
<li>Add the plugin to your <code>pom.xml</code>:</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
        ...
        <span class="nt">&lt;plugin&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>yosql-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
        ...
    <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div><ol start="2">
<li>Add .sql files in <em>src/main/yosql</em> and write SQL statements into them.</li>
</ol>
<pre><code>&lt;project_root&gt;/
├── pom.xml
└── src/
    └── main/
        └── yosql/
            └── domainObject/
                ├── yourQuery.sql
                └── changeYourData.sql
            └── aggregateRoot/
                ├── anotherQuery.sql
                └── addData.sql
</code></pre><ol start="3">
<li>Execute the <em>yosql:generate</em> goal (or just run <code>mvn generate-sources</code>) to generate the Java code.</li>
</ol>
<h2 id="configuration">Configuration</h2>
<p>You can configure how YoSQL operates and how the generated code like by using the default Maven configuration
mechanism (TODO: add link). Take a look at the <a href="../configuration/">available configuration options</a> in order to see what can be
configured.</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
        ...
        <span class="nt">&lt;plugin&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>yosql-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;configuration&gt;</span>
              <span class="nt">&lt;repositories&gt;</span>
                <span class="nt">&lt;basePackageName&gt;</span>your.domain.persistence<span class="nt">&lt;/basePackageName&gt;</span>
              <span class="nt">&lt;/repositories&gt;</span>
            <span class="nt">&lt;/configuration&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
        ...
    <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div><h3 id="multiple-configurations">Multiple Configurations</h3>
<p>In some cases it might be preferable to generate some repositories (TODO: link to glossary) with a specific set of configuration options while using another set for other repositories. There are several ways how this can be accomplished:</p>
<ol>
<li>Place SQL files in different Maven modules.</li>
<li>Use a single module with multiple <code>execution</code> configurations.</li>
<li>Override configuration for individual SQL statements.</li>
</ol>
<h4 id="multiple-executions">Multiple <code>execution</code>s</h4>
<p>Make sure that multiple executions do not make use of the same .sql files. Otherwise, the executions will overwrite
the generated code of each other. The last execution will win. Share configuration across all executions by using a single top level <code>configuration</code> block.</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
        ...
        <span class="nt">&lt;plugin&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>yosql-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;configuration&gt;</span>
              <span class="nt">&lt;repositories&gt;</span>
                <span class="nt">&lt;basePackageName&gt;</span>your.domain.persistence<span class="nt">&lt;/basePackageName&gt;</span>
              <span class="nt">&lt;/repositories&gt;</span>
            <span class="nt">&lt;/configuration&gt;</span>
            <span class="nt">&lt;executions&gt;</span>
                <span class="nt">&lt;execution&gt;</span>
                    <span class="nt">&lt;id&gt;</span>config-a<span class="nt">&lt;/id&gt;</span>
                    <span class="nt">&lt;configuration&gt;</span>
                      <span class="nt">&lt;files&gt;</span>
                        <span class="nt">&lt;inputBaseDirectory&gt;</span>src/main/database/reactive<span class="nt">&lt;/inputBaseDirectory&gt;</span>
                      <span class="nt">&lt;/files&gt;</span>
                      <span class="nt">&lt;repositories&gt;</span>
                        <span class="nt">&lt;generateRxJavaApi&gt;</span>true<span class="nt">&lt;/generateRxJavaApi&gt;</span>
                      <span class="nt">&lt;/repositories&gt;</span>
                    <span class="nt">&lt;/configuration&gt;</span>
                <span class="nt">&lt;/execution&gt;</span>
            <span class="nt">&lt;/executions&gt;</span>
            <span class="nt">&lt;executions&gt;</span>
                <span class="nt">&lt;execution&gt;</span>
                    <span class="nt">&lt;id&gt;</span>config-b<span class="nt">&lt;/id&gt;</span>
                    <span class="nt">&lt;configuration&gt;</span>
                      <span class="nt">&lt;files&gt;</span>
                        <span class="nt">&lt;inputBaseDirectory&gt;</span>src/main/database/synchronous<span class="nt">&lt;/inputBaseDirectory&gt;</span>
                      <span class="nt">&lt;/files&gt;</span>
                      <span class="nt">&lt;java&gt;</span>
                        <span class="nt">&lt;apiVersion&gt;</span>15<span class="nt">&lt;/apiVersion&gt;</span>
                      <span class="nt">&lt;/java&gt;</span>
                    <span class="nt">&lt;/configuration&gt;</span>
                <span class="nt">&lt;/execution&gt;</span>
            <span class="nt">&lt;/executions&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
        ...
    <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/tooling" term="tooling" label="Tooling"/><category scheme="https://yosql.projects.metio.wtf/tags/maven" term="maven" label="Maven"/></entry><entry><title type="html">Alternatives</title><link href="https://yosql.projects.metio.wtf/project/alternatives/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/project/alternatives/</id><published>2019-06-16T18:23:25+02:00</published><updated>2019-06-16T18:23:25+02:00</updated><content type="html"><![CDATA[<p>Here is an incomplete list of tools that we consider to be close siblings to <code>YoSQL</code>:</p>
<ul>
<li><a href="https://github.com/krisajenkins/yesql">https://github.com/krisajenkins/yesql</a></li>
<li><a href="https://www.hugsql.org/">https://www.hugsql.org/</a></li>
<li><a href="https://github.com/OpenGamma/ElSql">https://github.com/OpenGamma/ElSql</a></li>
<li><a href="https://sqlc.dev/">https://sqlc.dev/</a> (Go)</li>
</ul>
]]></content></entry><entry><title type="html">Scope and Vision</title><link href="https://yosql.projects.metio.wtf/project/scope-and-vision/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/project/scope-and-vision/</id><published>2019-06-16T18:23:25+02:00</published><updated>2019-06-16T18:23:25+02:00</updated><content type="html"><![CDATA[<p>vision:</p>
<ol>
<li>zero runtime dependencies</li>
<li>as few surprises as possible</li>
<li>should never fail</li>
<li>correct code over performance</li>
</ol>
<p>scope:</p>
<ol>
<li>all existing database access APIs</li>
<li>java/jvm only</li>
<li>all existing build tools</li>
</ol>
<p>out-of-scope:</p>
<ol>
<li>transaction management</li>
<li>object mapping</li>
<li>SQL parsing/understanding</li>
</ol>
]]></content></entry><entry><title type="html">Bazel</title><link href="https://yosql.projects.metio.wtf/tooling/bazel/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/tooling/bazel/</id><published>2019-06-16T18:22:51+02:00</published><updated>2019-06-16T18:22:51+02:00</updated><content type="html"><![CDATA[<ol>
<li>Add git repository to your <code>WORKSPACE</code>:</li>
</ol>
<pre><code>git_repository(
    name = &quot;yosql&quot;,
    remote = &quot;https://github.com/sebhoss/yosql.git&quot;,
    tag = &quot;0.0.1-bazel&quot;,
)
</code></pre><ol start="2">
<li>Write .sql files in a directory of your choice (e.g. <code>persistence</code>)</li>
</ol>
<pre><code>project/
├── WORKSPACE
└── persistence/
    ├── BUILD
    └── user/
        ├── findUser.sql
        └── addUser.sql
    └── item/
        ├── queryAllItems.sql
        └── createItemTable.sql
</code></pre><ol start="3">
<li>Declare a <code>genrule</code> in one of your BUILD files:</li>
</ol>
<pre><code>filegroup(
  name = &quot;your-sql-files&quot;,
  srcs = glob([&quot;persistence/**/*.sql&quot;]),
)

genrule(
  name = &quot;yosql-example&quot;,
  srcs = [&quot;:your-sql-files&quot;],
  outs = [
    &quot;com/example/persistence/UserRepository.java&quot;,
    &quot;com/example/persistence/ItemRepository.java&quot;,
    &quot;com/example/persistence/util/ResultRow.java&quot;,
    &quot;com/example/persistence/util/ResultState.java&quot;,
    &quot;com/example/persistence/util/FlowState.java&quot;,
    &quot;com/example/persistence/converter/ToResultRowConverter.java&quot;,
  ],
  cmd = &quot;&quot;&quot;
    $(location @yosql//yosql-cli) \
      --inputBaseDirectory persistence \
      --outputBaseDirectory $(@D) \
      --logLevel off
  &quot;&quot;&quot;,
  tools = [&quot;@yosql//yosql-cli&quot;],
)
</code></pre><ol start="4">
<li>Depend on the generated sources by using <code>:yosql-example</code> in the <code>srcs</code> of another rule.</li>
</ol>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/tooling" term="tooling" label="Tooling"/><category scheme="https://yosql.projects.metio.wtf/tags/bazel" term="bazel" label="Bazel"/></entry></feed>